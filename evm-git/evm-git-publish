#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0

#    EVM Contracts Source Index publishing tool
#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# Check all required programs
# are available
_requirements() {
  local \
    _zlib
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-networks' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'git'
  _check_cmd \
    'evm-gpg' \
    'evm-gnupg'
  _check_cmd \
    'find' \
    'findutils'
  _check_cmd \
    'gpg-key-info'
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    'tar'
  _zlib="$( \
    find \
      "$(_get_lib)/libz."* \
      -type \
        "f" \
        2>/dev/null || \
    true)"
  if [[ "${_zlib}" == "" ]]; then
    _msg_error \
      "No Zlib library detected." \
      1
  fi
  # TODO:
  # _check_cmd \
  #   'ur'
}

# shellcheck disable=SC2034
_global_variables() {
  publishing_date=()
  si_address=""
  si_version=""
  cache_dir=""
  target_publisher=""
  gnupg_home=""
  pgp_fingerprint=""
  pgp_email=""
  source_uri=""
  source_publish=""
  contract_address=""
  contract_source=""
  tx_deployment=""
  evm_version=""
  target_compiler=""
  compiler_version=""
  color=""
  quiet=""
}

_conf_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.config/${app_name}"
  echo \
    "${_dir}"
}

_cache_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.cache/${app_name}"
  echo \
    "${_dir}"
}

_contract_sign() {
  local \
    _dir="${1}" \
    _contract_name="${2}" \
    _gnupg_home="${3}" \
    _key_fingerprint="${4}" \
    _gpg_opts=() \
    _msg=()
  _msg=(
    "Signing source contract"
    "archive '${_dir}/${_contract_name}.tar.xz'."
  )
  _msg_info \
    "${_msg[*]}"
  _gpg_opts+=(
    --homedir
      "${_gnupg_home}"
    --local-user
      "${_key_fingerprint}"
    --sign
    --output
      "${_dir}/${_contract_name}.tar.xz.gpg"
  )
  if [[ "${quiet}" == "n" ]]; then
    _msg=(
      "Source contract directory"
      "contents:"
    )
    _msg_info \
      "${_msg[*]}"
    tree \
      "${_dir}"
  fi
  gpg \
    "${_gpg_opts[@]}" \
    "${_dir}/${_contract_name}.tar.xz"
}

_contract_compress() {
  local \
    _dir="${1}" \
    _contract_name="${2}" \
    _msg=()
  _msg=(
    "Compressing source recipe"
    "repository for contract"
    "'${_contract_name}.sol'."
  )
  _msg_info \
    "${_msg[*]}"
  XZ_OPT="-e9" \
  tar \
    --transform \
      "s%^${_dir#/}/${_contract_name}.sol%${_contract_name}.sol%" \
    --create \
    --file \
      "${_dir}/${_contract_name}.tar.xz" \
    --xz \
    "${_dir}/${_contract_name}.sol"
}

_contract_upload() {
  local \
    _source_dir="${1}" \
    _contract_name="${2}" \
    _wallet_name="${3}" \
    _wallet_path="${4}" \
    _wallet_password="${5}" \
    _wallet_seed="${6}" \
    _target_network="${7}" \
    _api_key_path="${8}" \
    _evmfs_opts=() \
    _evmfs_uri_opts=() \
    _msg=()
  _msg=(
    "Uploading contract's source signed archive"
    "'${_source_dir}/${_contract_name}.tar.xz.gpg'"
    "for contract '${_contract_name}' to the EVMFS."
  )
  _msg_info \
    "${_msg[*]}"
  if [[ ! -v "EVMFS_OPTS" ]]; then
    _evmfs_opts+=(
      -N
        "${_wallet_name}"
      -w
        "${_wallet_path}"
      -p
        "${_wallet_password}"
      -s
        "${_wallet_seed}"
      -n
        "${_target_network}"
      -k
        "${_api_key_path}"
      -m
        "bulk"
    )
  else
    _evmfs_opts+=(
      $EVMFS_OPTS
    )
  fi
  _evmfs_uri_opts+=(
    "${_evmfs_opts[@]}"
    -m
      "simulate"
  )
  if [[ "${quiet}" == "n" ]]; then
    _evmfs_opts+=(
      -v
    )
  fi
  evmfs \
    "${_evmfs_opts[@]}" \
    publish \
      "${_source_dir}/${_contract_name}.tar.xz.gpg"
  _msg=(
    "Getting uploaded contract's source"
    "signed archive"
    "'${_source_dir}/${_contract_name}.tar.xz.gpg'"
    "EVMFS uri."
  )
  _msg_info \
    "${_msg[*]}"
  _source_uri="$( \
    evmfs \
      "${_evmfs_uri_opts[@]}" \
      publish \
        "${_source_dir}/${_contract_name}.tar.xz.gpg")"
}

_contract_call_opts_setup() {
  _contract_call_opts+=(
    -n
      "${_target_network}"
    -N
      "${_wallet_name}"
    -k
      "${_api_key_path}"
    -A
      "${_abi}"
    -B
      "${_bytecode}"
    -C
      "${_compiler_output}"
  )
}

_publish_call_opts_setup() {
  local \
    _abi="${1}" \
    _bytecode="${2}" \
    _compiler_output="${3}" \
    _contract_call_opts=()
  _contract_call_opts_setup
  if [[ "${quiet}" == "n" ]]; then
    _publish_call_opts+=(
      -v
    )
  fi
  _publish_call_opts+=(
    "${_contract_call_opts[@]}"
    -t
      "dynamic"
  )
}

_source_locked_call_opts_setup() {
  local \
    _abi="${1}" \
    _bytecode="${2}" \
    _compiler_output="${3}" \
    _contract_call_opts=()
  _contract_call_opts_setup
  _source_locked_call_opts+=(
    "${_contract_call_opts[@]}"
    -t
      "static"
  )
}

_publisher_check_call_opts_setup() {
  local \
    _abi="${1}" \
    _bytecode="${2}" \
    _compiler_output="${3}" \
    _contract_call_opts=()
  _contract_call_opts_setup
  _publisher_check_call_opts+=(
    "${_contract_call_opts[@]}"
    -t
      "static"
  )
}

_evmfs_uri_check() {
  local \
    _uri="${1}" \
    _msg=()
  if [[ "${_uri}" != "evmfs://"* ]]; then
    _msg=(
      "Signed contract's source archive"
      "URI must be an EVMFS uri."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_contract_prepare() {
  local \
    _contract_source="${1}" \
    _contract_address="${2}" \
    _msg=() \
    _contract_filename
  if [[ ! -e "${_contract_source}" ]]; then
    _msg=(
      "Contract source"
      "'${_contract_source}'"
      "not found."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _work_dir_setup
  _contract_filename="$( \
    basename \
      "${_contract_source}")"
  _contract_name="${_contract_filename%*.sol}"
  cp \
    -r \
    "${_contract_source}" \
    "${_work_dir}/${_contract_address}.sol"
}

_source_locked_check() {
  local \
    _source_locked_call_opts=() \
    _locked \
    _msg=()
  _msg=(
    "Checking lock status for"
    "contract '${_contract_address}'"
    "on network '${_contract_network}'"
    "by publisher '${_target_publisher}'."
  )
  _msg_info \
    "${_msg[*]}"
  _source_locked_call_opts_setup \
    "${_si_abi}" \
    "${_si_bytecode}" \
    "${_si_compiler_output}"
  _locked="$( \
    evm-contract-call \
      "${_source_locked_call_opts[@]}" \
      "${_si_address}" \
      "lock" \
      "${_target_publisher}" \
      "${_contract_network}" \
      "${_contract_address}")"
  if [[ "${_locked}" == "true" ]]; then
    _msg=(
      "Contract source URI for contract"
      "with address '${_contract_address}'"
      "on network '${_contract_network}'"
      "by publisher '${_target_publisher}'"
      "already locked."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif [[ "${_locked}" == "false" ]]; then
    _msg=(
      "Contract unlocked, publishing."
    )
    _msg_info \
      "${_msg[*]}"
  else
    _msg=(
      "Unknown error retrieving contract's"
      "source lock status."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_contract_address_check() {
  local \
    _
  _tx_deployment="$( \
    _lower \
      "${_tx_deployment}")"
  _bytes32_check \
    "${_tx_deployment}"
}

_evm_contract_source_publish() {
  local \
    _si_address="${1}" \
    _si_version="${2}" \
    _deployments_dir="${3}" \
    _wallet_name="${4}" \
    _wallet_path="${5}" \
    _wallet_password="${6}" \
    _wallet_seed="${7}" \
    _target_network="${8}" \
    _api_key_path="${9}" \
    _target_publisher="${10}" \
    _gnupg_home="${11}" \
    _key_fingerprint="${12}" \
    _cache_dir="${13}" \
    _source_uri="${14}" \
    _source_publish="${15}" \
    _contract_network="${16}" \
    _contract_address="${17}" \
    _contract_source="${18}" \
    _tx_deployment="${19}" \
    _evm_version="${20}" \
    _target_compiler="${21}" \
    _compiler_version="${22}" \
    _msg=() \
    _contract_dir \
    _work_dir \
    _si_abi \
    _si_bytecode \
    _si_compiler_output \
    _publish_call_opts=()
  if [[ "${_contract_address}" == "" ]]; then
    _msg=(
      "No contract address specified."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  if [[ "${_tx_deployment}" == "" ]]; then
    _msg=(
      "No contract deployment transaction specified."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  if [[ "${_evm_version}" == "" ]]; then
    _msg=(
      "No contract EVM version specified."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  if [[ "${_compiler_version}" == "" ]]; then
    _msg=(
      "No contract compiler version specified."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _contract_address="$( \
    _lower \
      "${_contract_address}")"
  _tx_deployment="$( \
    _lower \
      "${_tx_deployment}")"
  _address_sanity_check \
    "${_contract_address}"
  _tx_hash_sanity_check \
    "${_tx_deployment}"
  _contract_dir="${_cache_dir}/${_contract_network}/${_contract_address}"
  _msg=(
    "Publishing source for"
    "contract '${_contract_source}'"
    "on the Source Index."
  )
  _msg_info \
    "${_msg[*]}"
  _contract_artifacts_auto_detect \
    "${_deployments_dir}" \
    "${_target_network}" \
    "SourceIndex" \
    "_si" \
    "${_si_version}"
  _publish_call_opts_setup \
    "${_si_abi}" \
    "${_si_bytecode}" \
    "${_si_compiler_output}"
  if [[ "${_source_publish}" == "n" ]]; then
    _msg=(
      "Skipping contract's source publishing."
    )
    _msg_info \
      "${_msg[*]}"
  elif [[ "${_source_publish}" == "y" ]]; then
    if [[ "${_source_uri}" == "" ]]; then
      _contract_prepare \
        "${_contract_source}" \
        "${_contract_address}"
      _contract_compress \
        "${_work_dir}" \
        "${_contract_address}"
      _contract_sign \
        "${_work_dir}" \
        "${_contract_address}" \
        "${_gnupg_home}" \
        "${_key_fingerprint}"
      _contract_upload \
        "${_work_dir}" \
        "${_contract_address}" \
        "${_wallet_name}" \
        "${_wallet_path}" \
        "${_wallet_password}" \
        "${_wallet_seed}" \
        "${_target_network}" \
        "${_api_key_path}"
    elif [[ "${_source_uri}" != "" ]]; then
      _msg=(
        "Signed contract source archive URI '${_source_uri}'"
        "specified through command line, skipping"
        "upload."
      )
      _msg_info \
        "${_msg[*]}"
      _evmfs_uri_check \
        "${_source_uri}"
    fi
    _source_locked_check
    _msg=(
      "Publisher"
      "'${_target_publisher}' posting"
      "source code '${_contract_source}'"
      "for '${_contract_name}' contract"
      "deployed on network '${_contract_network}'"
      "at transaction '${_tx_deployment}'"
      "with address '${_contract_address}',"
      "pointing to EVMFS URI '${_source_uri}',"
      "set to be built for EVM version"
      "'${_evm_version}', compiler"
      "'${_target_compiler}' version"
      "'${_compiler_version}' on the EVM Contracts'"
      "Source Index of network '${_target_network}'."
    )
    _msg_info \
      "${_msg[*]}"
    evm-contract-call \
      "${_publish_call_opts[@]}" \
      "${_si_address}" \
      "publish" \
      "${_target_publisher}" \
      "${_contract_network}" \
      "${_contract_address}" \
      "${_source_uri}" \
      "${_tx_deployment}" \
      "${_evm_version}" \
      "${_target_compiler}" \
      "${_compiler_version}"
    _msg=(
      "Source for contract"
      "'${_contract_name}'"
      "correctly published."
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _msg=(
    "Locking source for contract"
    "at address '${_contract_address}'"
    "on network '${_contract_network}'"
    "for publisher '${_target_publisher}'."
  )
  _msg_info \
    "${_msg[*]}"
  evm-contract-call \
    "${_publish_call_opts[@]}" \
    "${_si_address}" \
    "lockSource" \
    "${_target_publisher}" \
    "${_contract_network}" \
    "${_contract_address}"
  _msg=(
    "Contract's source correctly locked."
  )
  _msg_info \
    "${_msg[*]}"
}

_work_dir_setup() {
  local \
    _msg=()
  _work_dir="$( \
    mktemp \
      -u \
      -d \
      -p \
        "${_contract_dir}")"
  _msg=(
    "Setting up"
    "source contract publish"
    "work directory"
    "'${_work_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  mkdir \
    -p \
    "${_work_dir}"
  chmod \
    700 \
    "${_work_dir}"
}

_key_latest_select() {
  local \
    _keyserver_receive_dir \
    _find_opts=() \
    _keys=() \
    _keys_sorted=() \
    _msg=()
  _keyserver_receive_dir="${HOME}/.cache/evm-openpgp-keyserver/receive"
  _msg=(
    "Selecting latest published"
    "publisher's wallet address key"
    "retrieved from keyserver."
  )
  _msg_info \
    "${_msg[*]}"
  _msg=(
    "Looking for own signatures"
    "in '${_keyserver_receive_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  _find_opts+=(
    -type
      "f"
    -iname
      "${wallet_address}.*.asc"
    -print0
  )
  _msg=(
    "Running find with options"
    "'${_find_opts[@]}'."
  )
  _msg_info \
    "${_msg[*]}"
  mapfile \
    -d \
    $'\0' \
    _keys < \
    <(find \
        "${_keyserver_receive_dir}" \
	"${_find_opts[@]}" 2>/dev/null || \
      true)
  _keys_sorted=( $( \
    printf \
      "%s\n" \
      "${_keys[@]}" | \
      sort \
        -V)
  )
  if [[ "${_keys_sorted}" == "" ]]; then
    _msg=(
      "No keys in '${_keyserver_receive_dir}',"
      "create a key with"
      "'evm-gpg new <your_user_name> <your_full_name>',"
      "publish it with"
      "'evm-openpgp-keyserver-publish <your_wallet_address>'"
      "and then run"
      "'evm-openpgp-keyserver-receive <your_wallet_address>'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _msg_info \
    "Selecting key '${_keys_sorted[-1]}'."
  _fingerprint="$( \
    gpg-key-info \
      -o \
        "fingerprint" \
      "${_keys_sorted[-1]}")"
  _email="$( \
    gpg-key-info \
      -o \
        "email" \
      "${_keys_sorted[-1]}")"
}

_pgp_fingerprint_auto_detect() {
  local \
    _fingerprint
  _key_latest_select
  _set_override \
    "pgp" \
    "fingerprint" \
    "${_fingerprint}"
}

_pgp_email_auto_detect() {
  local \
    _email
  _key_latest_select
  _set_override \
    "pgp" \
    "email" \
    "${_email}"
}

_platform_auto_detect() {
  local \
    _platform="arch" \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]] || \
     [[ -v "TERMUX_VERSION" ]]; then
    _platform="termux"
  fi
  echo \
    "${_platform}"
}

_package_type_auto_detect() {
  local \
    _type
  if [[ "${publishing_platform}" == "fur" ]]; then
    _type="binary"
  elif [[ "${publishing_platform}" == "ur" || \
          "${publishing_platform}" == "gur"  ]]; then
    _type="source"
  fi
  _set_override \
    "package" \
    "type" \
    "${_type}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  local \
    _msg=()
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  _set_override \
    "publishing" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "user" \
    "level" \
    "n"
  _deployments_dir_auto_detect \
    "evm-contracts-source-index" \
    "${user_level}"
  _network_auto_detect \
    "SourceIndex" \
    "${deployments_dir}" \
    "${user_level}"
  _api_key_auto_detect \
    "${target_network}"
  _wallet_overrides_set \
    "evm-wallet" \
    "default" \
    "y"
  _set_override \
    "target" \
    "publisher" \
    "${wallet_address}"
  _set_override \
    "source" \
    "uri" \
    ""
  _set_override \
    "source" \
    "publish" \
    "y"
  _contract_setup_auto_detect \
    "evm-contracts-source-index" \
    "SourceIndex" \
    "si" \
    "${target_network}" \
    "${user_level}" \
    "${deployments_dir}"
  _set_override \
    "cache" \
    "dir" \
    "$(_cache_dir_auto_detect)"
  _set_override \
    "gnupg" \
    "home" \
    "${HOME}/.config/evm-gnupg"
  _set_override \
    "gnupg" \
    "home" \
    "${HOME}/.config/evm-gnupg"
  _pgp_fingerprint_auto_detect
  _pgp_email_auto_detect
  _set_override \
    "target" \
    "compiler" \
    "solc"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _si \
    _si_deployment \
    _networks \
    _usage_text
  _si="SourceIndex"
  _si_deployment="${deployments_dir}/${_si}"
  _networks=( $( \
    evm-contract-deployment-networks \
      -A \
      "${_si_deployment}")
  )
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

EVM networks contracts' source index publishing tool.

Usage:
  ${app_name}
    [options]
    <contract_network>
    <contract_address>
    <contract_source>
    <tx_deployment>
    <evm_version>
    <compiler>
    <compiler_version>

  networks:
$(_display_networks \
     "${_networks[@]}")

  options:
     -P <target_publisher>     Target source publisher,
                               i.e. user's wallet address.
                               Default: ${target_publisher}
     -U <source_uri>           To manually specify the signed
                               contract's source archive evmfs URI
                               and skip upload.
                               Default: ${source_uri}
     -S <y/n>                  If set to 'y', it will skip
                               source publishing.
                               Default: ${source_publish}
     -K <fingerprint>          OpenPGP signature key.
                               Default: ${pgp_fingerprint}
     -E <email_like_id>        OpenPGP signature email.
                               Default: ${pgp_email}

  contract options:
     -A <si_address>           Address of the 'Source Index'
                               contract on the network.
                               Default: ${si_address}
     -V <si_version>           Version of the target 'Source Index'
                               contract.
                               Default: ${si_version}
  libEVM options:
     -u                        Whether to retrieve publishers' contract
                               address from user directory or custom
                               deployment.
                               Default: ${user_level}
     -d <deployments_dir>      Contracts deployments directory.
                               Default: ${deployments_dir}
     -n <network>              EVM network name (${_networks[*]}).
                               Default: ${target_network}

  credentials options:
     -N <wallet_name>          Wallet name.
                               Default: ${wallet_name}
     -w <wallet_path>          Wallet path.
                               Default: ${wallet_path}
     -p <wallet_password>      Wallet password.
                               Default: ${wallet_password}
     -s <wallet_seed>          Wallet seed path.
                               Default: ${wallet_seed}
     -k <api_key>              Etherscan-like service key.
                               Default: ${api_key}

  application options:
     -H <gnupg_home>           GNUPG home directory.
                               Default: ${gnupg_home}

     -c                        Colors.
     -h                        This message.
     -v                        Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "            Publishing date:   ${publishing_date}"
  _msg_info "       Source Index address:   ${si_address}"
  _msg_info "       Source Index version:   ${si_version}"
  _msg_info "                 User level:   ${user_level}"
  _msg_info "      Deployments directory:   ${deployments_dir}"
  _msg_info "             Wallet address:   ${wallet_address}"
  _msg_info "                Wallet name:   ${wallet_name}"
  _msg_info "                Wallet path:   ${wallet_path}"
  _msg_info "            Wallet password:   ${wallet_password}"
  _msg_info "                Wallet seed:   ${wallet_seed}"
  _msg_info "             Target network:   ${target_network}"
  _msg_info "                    API key:   ${api_key}"
  _msg_info "           Target publisher:   ${target_publisher}"
  _msg_info "            Cache directory:   ${cache_dir}"
  _msg_info "            GNUPG directory:   ${gnupg_home}"
  _msg_info "              Signature key:   ${pgp_fingerprint}"
  _msg_info "            Signature email:   ${pgp_email}"
  _msg_info "          Target source URI:   ${source_uri}"
  _msg_info "             Source publish:   ${source_publish}"
  _msg_info "           Contract network:   ${contract_network}"
  _msg_info "           Contract address:   ${contract_address}"
  _msg_info "            Target contract:   ${contract_source}"
  _msg_info "     Deployment transaction:   ${tx_deployment}"
  _msg_info "         Target EVM version:   ${evm_version}"
  _msg_info "            Target compiler:   ${target_compiler}"
  _msg_info "    Target compiler version:   ${compiler_version}"
}

_globals
_global_variables
_requirements
_libevm_global_variables
# shellcheck disable=SC2034
getopts_opts="$( \
  printf \
    "%s" \
    "P:U:S:H:K:E:" \
    "A:V:" \
    "$(_libevm_app_getopts_params_get)" \
    "n:" \
    "$(_wallet_getopts_params_get)" \
    "W:cvh")"
while \
  getopts \
    "${getopts_opts}" \
    arg; do
  _wallet_getopts_case
  _libevm_app_getopts_case
  case \
    "${arg}" in
    A) \
      override_si_address="${OPTARG}" ;;
    V) \
      override_si_version="${OPTARG}" ;;
    n) \
      override_target_network="${OPTARG}" ;;
    P) \
      override_target_publisher="${OPTARG}" ;;
    U) \
      override_source_uri="${OPTARG}" ;;
    S) \
      override_source_publish="${OPTARG}" ;;
    H) \
      override_gnupg_home="${OPTARG}" ;;
    K) \
      override_pgp_fingerprint="${OPTARG}" ;;
    E) \
      override_pgp_email="${OPTARG}" ;;
    W) \
      override_cache_dir="${OPTARG}" ;;
    c) \
      override_color="y" ;;
    v) \
      override_quiet="n" ;;
    h) \
      _set_overrides && \
      _usage \
        0 ;;
    *) \
      if [[ " ${getopts_opts} " != *"${arg}"* ]]; then
        _msg_error \
          "Invalid argument '${arg}'." \
          0
        _usage \
          1
      fi ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "No contract network specified." \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 1 )); then
  _msg_error \
    "No contract network specified." \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 2 )); then
  _msg_error \
    "No contract address specified." \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 3 )); then
  _msg_error \
    "No contract source given." \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 4 )); then
  _msg_error \
    "No deployment transaction hash given." \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 5 )); then
  _msg_error \
    "No EVM version specified." \
    0
  _set_overrides
  _usage \
    1
fi

if (( $# < 6 )); then
  _msg_error \
    "No compiler specified." \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 7 )); then
  _msg_error \
    "No compiler version specified." \
    0
  _set_overrides
  _usage \
    1
fi
contract_network="${1}"
contract_address="${2}"
contract_source="${3}"
tx_deployment="${4}"
evm_version="${5}"
target_compiler="${6}"
compiler_version="${7}"
_config_user_init \
  "${app_name}"
_set_overrides
_show_config
app_opts=(
  "${si_address}"
  "${si_version}"
  "${deployments_dir}"
  "${wallet_name}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${api_key}"
  "${target_publisher}"
  "${gnupg_home}"
  "${pgp_fingerprint}"
  "${cache_dir}"
  "${source_uri}"
  "${source_publish}"
  "${contract_network}"
  "${contract_address}"
  "${contract_source}"
  "${tx_deployment}"
  "${evm_version}"
  "${target_compiler}"
  "${compiler_version}"
)
_evm_contract_source_publish \
  "${app_opts[@]}"
